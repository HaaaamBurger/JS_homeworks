//----------------------------------------------------------------------------------------------------------------------
// - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
//----------------------------------------------------------------------------------------------------------------------
// {
//     id: 1,
//         name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//     street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//         lat: '-37.3159',
//             lng: '81.1496'
//     }
// },
//     phone: '1-770-736-8031 x56442',
//         website: 'hildegard.org',
//     company: {
//     name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
// }
// }
//----------------------------------------------------------------------------------------------------------------------
// function User(id,name,username,email,street,suite,city,zipcode,lat,lng,phone,website,companyName,catchPhrase,bs) {
//     this.id = id;
//     this.name = name;
//     this.username = username;
//     this.email = email;
//     this.address = {
//         street: street,
//         suite: suite,
//         city: city,
//         zipcode: zipcode,
//         geo:{
//             lat: lat,
//             lng: lng,
//         }
//     }
//     this.phone = phone;
//     this.website = website;
//     this.company = {
//         name: companyName,
//         catchPhrase: catchPhrase,
//         bs: bs,
//     }
// }
// const user = new User(
//     1,
//     'Leanne Graham',
//     'Bret',
//     'Sincere@april.biz',
//     'Kulas Light',
//     'Apt. 556',
//     'Gwenborough',
//     '92998-3874',
//     '-37.3159',
//     '81.1496',
//     '1-770-736-8031 x56442',
//     'hildegard.org',
//     'Romaguera-Crona',
//     'Multi-layered client-server neural-net',
//     'harness real-time e-markets'
//     );
// console.log(user);
//----------------------------------------------------------------------------------------------------------------------
// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//     -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
//
// }
//----------------------------------------------------------------------------------------------------------------------
// class Tag {
//
//     constructor(tagTitle, description, atr_1, description_1,atr_2, description_2) {
//         this.tagTitle = tagTitle;
//         this.description = description;
//         this.attrs = [
//             {atr_1: atr_1},
//             {atr_2: atr_2},
//         ];
//         this.first_atr = {
//             name: atr_1,
//             description: description_1,
//         };
//         this.second_atr = {
//             name: atr_2,
//             description: description_2,
//         };
//
//     }
// }
// const a = new Tag(
//     'a',
//     'Створює посилання на іншу сторіку(Зовнішне посилання) або на певний елемент цієї сторінки(Внутрішне посилання).',
//     'href',
//     'Вказує місце, куди буде посилатися створене посилання.',
//     'target',
//     'Ім\'я вікна або фрейму, куди браузер буде завантажувати документ.',
// );
// const div = new Tag(
//     'div',
//     'Використовується, щоб групувати блоки інформації та форматувати її за допомогою CSS.',
//     'align',
//     'Визначає вирівнювання вмісту всередині div елемента.',
//     'title',
//     'Вказує додаткову текстову підказку',
//     )
// const h1 = new Tag(
//     'h1',
//     'Найбільший заголовок',
//     'align',
//     'Вирівнювання заголовку.',
//     'translate',
//     'Повідомляє браузеру переводити вказаний текст в елементі чи ні.',
//     )
// const span = new Tag(
//     'span',
//     'Являє собою універсальний порожній контейнер',
//     'contextmenu',
//     'Контекстне меню для елемента',
//     'accesskey',
//     'Дозволяє активувати або сфокусуватись на елементі за допомогою заданого сполучення клавіш.',
// )
// const input = new Tag(
//     'input',
//     'Є одним з різнобічних елементів форми і дозволяє створювати різні елементи інтерфейсу і забезпечити взаємодію з користувачем',
//     'accept',
//     'Встановлює фільтр на типи файлів, які ви можете надіслати через поле завантаження файлів.',
//     'align',
//     'Визначає вирівнювання зображення (для type ="image").',
// )
// const option = new Tag(
//     'option',
//     'Призначений для створення пункту списку для тега select чи datalist.',
//     'disabled',
//     'Відключає пункт списку.',
//     'label',
//     'Вказує короткий опис для пункту списку',
// );
// const select = new Tag(
//     'select',
//     'Дозволяє створити елемент інтерфейсу у вигляді списку, що розкривається, а також список з одним або множинним вибором.',
//     'autofocus',
//     'Встановлює фокус після завантаження сторінки.',
//     'form',
//     'Повʼязує список з однією або з кількома формами.',
// )
//
// console.log(a,div,h1,span,input,option,select);
//----------------------------------------------------------------------------------------------------------------------
